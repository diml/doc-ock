# Generated by Assemblage for doc-ock da23e5.

# Run `make help' to get the list of targets.

.PHONY: all clean lib bin test doc distclean js help lib-doc-ock

# 
# Main project configuration
# 

BUILDIR     ?= _build
DUMPAST     ?= ocaml-dumpast
JS_OF_OCAML ?= js_of_ocaml
LIBDIR      ?= $(LIBDIR)
LN          ?= ln -sf
MKDIR       ?= mkdir -p
OCAMLMKLIB  ?= ocamlmklib
ROOTDIR     = $(shell pwd)
ifeq ($(HAS_NATIVE_TOOLCHAIN:true=),)
OCAMLC      ?= ocamlc.opt
OCAMLDEP    ?= ocamldep.opt
OCAMLDOC    ?= ocamldoc.opt
OCAMLOPT    ?= ocamlopt.opt
else
OCAMLC      ?= ocamlc
OCAMLDEP    ?= ocamldep
OCAMLDOC    ?= ocamldoc
OCAMLOPT    ?= ocamlopt
endif

HAS_ANNOT            ?= true
HAS_BYTE             ?= true
HAS_DEBUG            ?= true
HAS_DOC              ?= false
HAS_JS               ?= false
HAS_NATIVE           ?= true
HAS_NATIVE_DYNLINK   ?= true
HAS_NATIVE_TOOLCHAIN ?= true
HAS_TEST             ?= false
HAS_WARN_ERROR       ?= false

# 
# Global variables
# 

all            := lib
compile-byte   := 
compile-native := 
link-byte      := 
link-native    := 
ifeq ($(HAS_WARN_ERROR:true=),)
compile-byte   += -warn-error A-44-4-48 -w A-44-4-48
endif
ifeq ($(HAS_DEBUG:true=),)
compile-byte   += -g
compile-native += -g
link-byte      += -g
link-native    += -g
endif
ifeq ($(HAS_ANNOT:true=),)
compile-byte   += -bin-annot
endif

# 
# Component configuration.
# 
# Each component has variables associated to the different phases of the build.
# <NAME>.<PHASE> controls the compilation options for the component <NAME>,
# during the phase <PHASE>.
# 

lib := lib-doc-ock

# Library: doc-ock
lib-doc-ock := 
ifeq ($(HAS_BYTE:true=),)
lib-doc-ock += $(BUILDIR)/lib-doc-ock/doc-ock.cma
endif
ifeq ($(HAS_NATIVE:true=),)
lib-doc-ock +=  \
    $(BUILDIR)/lib-doc-ock/doc-ock.a \
    $(BUILDIR)/lib-doc-ock/doc-ock.cmxa
endif
ifeq ($(HAS_NATIVE:true=)$(HAS_NATIVE_DYNLINK:true=),)
lib-doc-ock += $(BUILDIR)/lib-doc-ock/doc-ock.cmxs
endif
lib-doc-ock.archive-byte ?=  \
    $(archive-byte) \
    -a \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmo \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmo \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmo \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmo \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmo \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmo \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmo \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmo \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmo \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmo \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmo \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmo \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmo \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmo \
    $(BUILDIR)/lib-doc-ock/docOck.cmo
lib-doc-ock.archive-native ?=  \
    $(archive-native) \
    -a \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmx \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmx \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmx \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmx \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmx \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmx \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmx \
    $(BUILDIR)/lib-doc-ock/docOck.cmx
lib-doc-ock.archive-shared ?=  \
    $(archive-shared) \
    -shared \
    -linkall \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmx \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmx \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmx \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmx \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmx \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmx \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmx \
    $(BUILDIR)/lib-doc-ock/docOck.cmx
lib-doc-ock.compile-byte ?=  \
    $(compile-byte) \
    $(shell ocamlfind query -r -predicates byte -format "-I %d" -r compiler-libs.common \
            octavius) \
    -I $(BUILDIR)/lib-doc-ock
lib-doc-ock.compile-native ?=  \
    $(compile-native) \
    $(shell ocamlfind query -r -predicates native -format "-I %d" -r compiler-libs.common \
            octavius) \
    -I $(BUILDIR)/lib-doc-ock
lib-doc-ock.dep ?=  \
    $(dep) \
    -I $(BUILDIR)/lib-doc-ock
lib-doc-ock.pp-byte ?= $(pp-byte)
lib-doc-ock.pp-native ?= $(pp-native)

bin := 

js := 

test := 

doc := 

# Compilation unit: src/docOckPaths
unit-docOckPaths-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckPaths-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckPaths-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckPaths-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckPaths-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckTypes
unit-docOckTypes-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckTypes-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckTypes-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckTypes-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckMaps
unit-docOckMaps-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckMaps-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckMaps-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckMaps-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckMaps-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckPredef
unit-docOckPredef-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckPredef-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckPredef-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckPredef-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckPredef-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckNameEnv
unit-docOckNameEnv-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckNameEnv-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckNameEnv-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckNameEnv-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckNameEnv-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckIdentEnv
unit-docOckIdentEnv-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckIdentEnv-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckIdentEnv-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckIdentEnv-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckIdentEnv-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckLookup
unit-docOckLookup-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckLookup-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckLookup-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckLookup-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckLookup-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckAttrs
unit-docOckAttrs-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckAttrs-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckAttrs-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckAttrs-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckAttrs-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckCmi
unit-docOckCmi-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckCmi-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckCmi-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckCmi-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckCmi-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckCmti
unit-docOckCmti-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckCmti-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckCmti-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckCmti-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckCmti-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckCmt
unit-docOckCmt-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckCmt-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckCmt-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckCmt-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckCmt-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckComponents
unit-docOckComponents-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckComponents-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckComponents-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckComponents-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckComponents-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckComponentTbl
unit-docOckComponentTbl-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckComponentTbl-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckComponentTbl-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckComponentTbl-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckComponentTbl-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckResolve
unit-docOckResolve-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckResolve-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckResolve-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckResolve-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckResolve-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOckSubst
unit-docOckSubst-lib-doc-ock.compile-byte ?= $(lib-doc-ock.compile-byte)
unit-docOckSubst-lib-doc-ock.compile-native ?= $(lib-doc-ock.compile-native)
unit-docOckSubst-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOckSubst-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOckSubst-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)

# Compilation unit: src/docOck
unit-docOck-lib-doc-ock.compile-byte ?=  \
    $(lib-doc-ock.compile-byte) \
    -no-alias-deps
unit-docOck-lib-doc-ock.compile-native ?=  \
    $(lib-doc-ock.compile-native) \
    -no-alias-deps
unit-docOck-lib-doc-ock.dep ?= $(lib-doc-ock.dep)
unit-docOck-lib-doc-ock.pp-byte ?= $(lib-doc-ock.pp-byte)
unit-docOck-lib-doc-ock.pp-native ?= $(lib-doc-ock.pp-native)


all:: 
	@echo '[04mall[m [1;34m=>[m ${all}'
	@$(MAKE) $(all)
	@if [ "x${HAS_JS}" = "x1" ]; then $(MAKE) js; fi
	@if [ "x${HAS_TEST}" = "x1" ]; then $(MAKE) test; fi
	@if [ "x${HAS_DOC}" = "x1" ]; then $(MAKE) doc; fi
	@if [ "x${HAS_FULL_DOC}" = "x1" ]; then $(MAKE) full-doc; fi
	@echo '[32m==>[m Done!'

clean:: 
	rm -f *~ **/*~
	rm -rf $(BUILDIR)

distclean:: clean
	rm -f Makefile doc-ock.install META .merlin

install:: all
	@opam-installer --prefix $(shell opam config var prefix) doc-ock.install

help: 
	@echo 'Use [04mVERBOSE=true[m to show the full commands.'
	@echo 'The following targets are available (use "make [04m<target>[m"):'
	@echo
	@echo ' - [04mall[m -- build all the active targets.'
	@echo ' - [04mlib-doc-ock[m -- build the library doc-ock.'
	@echo ' - [04mdoc[m -- build the documentation.'
	@echo ' - [04mtest[m -- build and run the test.'
	@echo ' - [04mjs[m -- build the js_of_ocaml targets.'
	@echo ' - [04mclean[m -- clean the build artefacts.'
	@echo ' - [04mdistclean[m -- clean the project to prepare the release.'
	@echo
	@echo
	@echo 'Current configuration (use "make [04mVAR=BOOL[m" to modify):'
	@echo
	@echo ' - [04mHAS_ANNOT=$(HAS_ANNOT)[m -- Build OCaml binary annotations files.'
	@echo ' - [04mHAS_BYTE=$(HAS_BYTE)[m -- Byte code OCaml compilation is available.'
	@echo ' - [04mHAS_DEBUG=$(HAS_DEBUG)[m -- Build with debugging support.'
	@echo ' - [04mHAS_DOC=$(HAS_DOC)[m -- Build the documentation.'
	@echo ' - [04mHAS_JS=$(HAS_JS)[m -- JavaScript code OCaml compilation with js_of_ocaml is available.'
	@echo ' - [04mHAS_NATIVE=$(HAS_NATIVE)[m -- Native code OCaml compilation is available.'
	@echo ' - [04mHAS_NATIVE_DYNLINK=$(HAS_NATIVE_DYNLINK)[m -- Native code OCaml dynamic linking is available.'
	@echo ' - [04mHAS_NATIVE_TOOLCHAIN=$(HAS_NATIVE_TOOLCHAIN)[m -- The native compiled OCaml toolchain is available (.opt tools).'
	@echo ' - [04mHAS_TEST=$(HAS_TEST)[m -- Build the tests.'
	@echo ' - [04mHAS_WARN_ERROR=$(HAS_WARN_ERROR)[m -- Build with warnings as errors.'
	@echo

lib: $(lib)
	@

lib-doc-ock: $(lib-doc-ock)
	@

$(BUILDIR)/lib-doc-ock/: 
	@if test -n "$$VERBOSE"; \
        then echo '$(MKDIR) $(BUILDIR)/lib-doc-ock'; \
        else echo 'lib-doc-ock               [32m<=[m [01mprepare[m lib-doc-ock'; fi
	@$(MKDIR) $(BUILDIR)/lib-doc-ock

$(BUILDIR)/lib-doc-ock/doc-ock.cma:  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmo \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmo \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmo \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmo \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmo \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmo \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmo \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmo \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmo \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmo \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmo \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmo \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmo \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmo \
    $(BUILDIR)/lib-doc-ock/docOck.cmo \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) $(lib-doc-ock.archive-byte) -o $(BUILDIR)/lib-doc-ock/doc-ock.cma'; \
        else echo 'doc-ock.cma               [32m<=[m [01marchive-byte[m lib-doc-ock'; fi
	@$(OCAMLC) $(lib-doc-ock.archive-byte) -o $(BUILDIR)/lib-doc-ock/doc-ock.cma

$(BUILDIR)/lib-doc-ock/doc-ock.cmxa $(BUILDIR)/lib-doc-ock/doc-ock.a:  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmx \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmx \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmx \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmx \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmx \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmx \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmx \
    $(BUILDIR)/lib-doc-ock/docOck.cmx \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) $(lib-doc-ock.archive-native) -o $(BUILDIR)/lib-doc-ock/doc-ock.cmxa'; \
        else echo 'doc-ock.cmxa doc-ock.a    [32m<=[m [01marchive-native[m lib-doc-ock'; fi
	@$(OCAMLOPT) $(lib-doc-ock.archive-native) -o $(BUILDIR)/lib-doc-ock/doc-ock.cmxa

$(BUILDIR)/lib-doc-ock/doc-ock.cmxs:  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmx \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmx \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmx \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmx \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmx \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmx \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmx \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmx \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmx \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmx \
    $(BUILDIR)/lib-doc-ock/docOck.cmx \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) $(lib-doc-ock.archive-shared) -o $(BUILDIR)/lib-doc-ock/doc-ock.cmxs'; \
        else echo 'doc-ock.cmxs              [32m<=[m [01marchive-shared[m lib-doc-ock'; fi
	@$(OCAMLOPT) $(lib-doc-ock.archive-shared) -o $(BUILDIR)/lib-doc-ock/doc-ock.cmxs

bin: $(bin)
	@

js: $(js)
	@

test: $(test)
	@

doc: $(doc)
	@

$(BUILDIR)/lib-doc-ock/docOckPaths.mli: src/docOckPaths.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckPaths.mli $(BUILDIR)/lib-doc-ock/docOckPaths.mli'; \
        else echo 'docOckPaths.mli           [32m<=[m [01mprepare[m unit-docOckPaths-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckPaths.mli $(BUILDIR)/lib-doc-ock/docOckPaths.mli

$(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckPaths.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPaths.mli > $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte'; \
        else echo 'docOckPaths.cmli-byte     [32m<=[m [01mpp-byte[m unit-docOckPaths-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPaths.mli > $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckPaths.cmli-native: $(BUILDIR)/lib-doc-ock/docOckPaths.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPaths.mli > $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-native'; \
        else echo 'docOckPaths.cmli-native   [32m<=[m [01mpp-native[m unit-docOckPaths-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPaths.mli > $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-native

$(BUILDIR)/lib-doc-ock/docOckPaths.mli.d: $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckPaths-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckPaths.mli.d'; \
        else echo 'docOckPaths.mli.d         [32m<=[m [01mdep[m unit-docOckPaths-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckPaths-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckPaths.mli.d

$(BUILDIR)/lib-doc-ock/docOckPaths.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckPaths-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte'; \
        else echo 'docOckPaths.cmi           [32m<=[m [01mcompile-byte[m unit-docOckPaths-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckPaths-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckPaths.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckPaths.ml: src/docOckPaths.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckPaths.ml $(BUILDIR)/lib-doc-ock/docOckPaths.ml'; \
        else echo 'docOckPaths.ml            [32m<=[m [01mprepare[m unit-docOckPaths-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckPaths.ml $(BUILDIR)/lib-doc-ock/docOckPaths.ml

$(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte: $(BUILDIR)/lib-doc-ock/docOckPaths.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPaths.ml > $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte'; \
        else echo 'docOckPaths.cml-byte      [32m<=[m [01mpp-byte[m unit-docOckPaths-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPaths.ml > $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte

$(BUILDIR)/lib-doc-ock/docOckPaths.cml-native: $(BUILDIR)/lib-doc-ock/docOckPaths.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPaths.ml > $(BUILDIR)/lib-doc-ock/docOckPaths.cml-native'; \
        else echo 'docOckPaths.cml-native    [32m<=[m [01mpp-native[m unit-docOckPaths-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPaths-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPaths.ml > $(BUILDIR)/lib-doc-ock/docOckPaths.cml-native

$(BUILDIR)/lib-doc-ock/docOckPaths.ml.d: $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckPaths-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte > $(BUILDIR)/lib-doc-ock/docOckPaths.ml.d'; \
        else echo 'docOckPaths.ml.d          [32m<=[m [01mdep[m unit-docOckPaths-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckPaths-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte > $(BUILDIR)/lib-doc-ock/docOckPaths.ml.d

$(BUILDIR)/lib-doc-ock/docOckPaths.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckPaths-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte'; \
        else echo 'docOckPaths.cmo           [32m<=[m [01mcompile-byte[m unit-docOckPaths-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckPaths-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckPaths.cml-byte

$(BUILDIR)/lib-doc-ock/docOckPaths.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cmi \
    $(BUILDIR)/lib-doc-ock/docOckPaths.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckPaths-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckPaths.cml-native'; \
        else echo 'docOckPaths.cmx           [32m<=[m [01mcompile-native[m unit-docOckPaths-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckPaths-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckPaths.cml-native

$(BUILDIR)/lib-doc-ock/docOckTypes.mli: src/docOckTypes.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckTypes.mli $(BUILDIR)/lib-doc-ock/docOckTypes.mli'; \
        else echo 'docOckTypes.mli           [32m<=[m [01mprepare[m unit-docOckTypes-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckTypes.mli $(BUILDIR)/lib-doc-ock/docOckTypes.mli

$(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckTypes.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckTypes-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckTypes.mli > $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte'; \
        else echo 'docOckTypes.cmli-byte     [32m<=[m [01mpp-byte[m unit-docOckTypes-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckTypes-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckTypes.mli > $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckTypes.cmli-native: $(BUILDIR)/lib-doc-ock/docOckTypes.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckTypes-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckTypes.mli > $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-native'; \
        else echo 'docOckTypes.cmli-native   [32m<=[m [01mpp-native[m unit-docOckTypes-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckTypes-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckTypes.mli > $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-native

$(BUILDIR)/lib-doc-ock/docOckTypes.mli.d: $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckTypes-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckTypes.mli.d'; \
        else echo 'docOckTypes.mli.d         [32m<=[m [01mdep[m unit-docOckTypes-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckTypes-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckTypes.mli.d

$(BUILDIR)/lib-doc-ock/docOckTypes.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckTypes-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte'; \
        else echo 'docOckTypes.cmi           [32m<=[m [01mcompile-byte[m unit-docOckTypes-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckTypes-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckTypes.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckMaps.mli: src/docOckMaps.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckMaps.mli $(BUILDIR)/lib-doc-ock/docOckMaps.mli'; \
        else echo 'docOckMaps.mli            [32m<=[m [01mprepare[m unit-docOckMaps-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckMaps.mli $(BUILDIR)/lib-doc-ock/docOckMaps.mli

$(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckMaps.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckMaps.mli > $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte'; \
        else echo 'docOckMaps.cmli-byte      [32m<=[m [01mpp-byte[m unit-docOckMaps-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckMaps.mli > $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckMaps.cmli-native: $(BUILDIR)/lib-doc-ock/docOckMaps.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckMaps.mli > $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-native'; \
        else echo 'docOckMaps.cmli-native    [32m<=[m [01mpp-native[m unit-docOckMaps-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckMaps.mli > $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-native

$(BUILDIR)/lib-doc-ock/docOckMaps.mli.d: $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckMaps-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckMaps.mli.d'; \
        else echo 'docOckMaps.mli.d          [32m<=[m [01mdep[m unit-docOckMaps-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckMaps-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckMaps.mli.d

$(BUILDIR)/lib-doc-ock/docOckMaps.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckMaps-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte'; \
        else echo 'docOckMaps.cmi            [32m<=[m [01mcompile-byte[m unit-docOckMaps-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckMaps-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckMaps.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckMaps.ml: src/docOckMaps.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckMaps.ml $(BUILDIR)/lib-doc-ock/docOckMaps.ml'; \
        else echo 'docOckMaps.ml             [32m<=[m [01mprepare[m unit-docOckMaps-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckMaps.ml $(BUILDIR)/lib-doc-ock/docOckMaps.ml

$(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte: $(BUILDIR)/lib-doc-ock/docOckMaps.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckMaps.ml > $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte'; \
        else echo 'docOckMaps.cml-byte       [32m<=[m [01mpp-byte[m unit-docOckMaps-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckMaps.ml > $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte

$(BUILDIR)/lib-doc-ock/docOckMaps.cml-native: $(BUILDIR)/lib-doc-ock/docOckMaps.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckMaps.ml > $(BUILDIR)/lib-doc-ock/docOckMaps.cml-native'; \
        else echo 'docOckMaps.cml-native     [32m<=[m [01mpp-native[m unit-docOckMaps-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckMaps-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckMaps.ml > $(BUILDIR)/lib-doc-ock/docOckMaps.cml-native

$(BUILDIR)/lib-doc-ock/docOckMaps.ml.d: $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckMaps-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte > $(BUILDIR)/lib-doc-ock/docOckMaps.ml.d'; \
        else echo 'docOckMaps.ml.d           [32m<=[m [01mdep[m unit-docOckMaps-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckMaps-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte > $(BUILDIR)/lib-doc-ock/docOckMaps.ml.d

$(BUILDIR)/lib-doc-ock/docOckMaps.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckMaps-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte'; \
        else echo 'docOckMaps.cmo            [32m<=[m [01mcompile-byte[m unit-docOckMaps-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckMaps-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckMaps.cml-byte

$(BUILDIR)/lib-doc-ock/docOckMaps.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cmi \
    $(BUILDIR)/lib-doc-ock/docOckMaps.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckMaps-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckMaps.cml-native'; \
        else echo 'docOckMaps.cmx            [32m<=[m [01mcompile-native[m unit-docOckMaps-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckMaps-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckMaps.cml-native

$(BUILDIR)/lib-doc-ock/docOckPredef.mli: src/docOckPredef.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckPredef.mli $(BUILDIR)/lib-doc-ock/docOckPredef.mli'; \
        else echo 'docOckPredef.mli          [32m<=[m [01mprepare[m unit-docOckPredef-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckPredef.mli $(BUILDIR)/lib-doc-ock/docOckPredef.mli

$(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckPredef.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPredef.mli > $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte'; \
        else echo 'docOckPredef.cmli-byte    [32m<=[m [01mpp-byte[m unit-docOckPredef-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPredef.mli > $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckPredef.cmli-native: $(BUILDIR)/lib-doc-ock/docOckPredef.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPredef.mli > $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-native'; \
        else echo 'docOckPredef.cmli-native  [32m<=[m [01mpp-native[m unit-docOckPredef-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPredef.mli > $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-native

$(BUILDIR)/lib-doc-ock/docOckPredef.mli.d: $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckPredef-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckPredef.mli.d'; \
        else echo 'docOckPredef.mli.d        [32m<=[m [01mdep[m unit-docOckPredef-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckPredef-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckPredef.mli.d

$(BUILDIR)/lib-doc-ock/docOckPredef.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckPredef-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte'; \
        else echo 'docOckPredef.cmi          [32m<=[m [01mcompile-byte[m unit-docOckPredef-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckPredef-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckPredef.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckPredef.ml: src/docOckPredef.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckPredef.ml $(BUILDIR)/lib-doc-ock/docOckPredef.ml'; \
        else echo 'docOckPredef.ml           [32m<=[m [01mprepare[m unit-docOckPredef-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckPredef.ml $(BUILDIR)/lib-doc-ock/docOckPredef.ml

$(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte: $(BUILDIR)/lib-doc-ock/docOckPredef.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPredef.ml > $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte'; \
        else echo 'docOckPredef.cml-byte     [32m<=[m [01mpp-byte[m unit-docOckPredef-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckPredef.ml > $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte

$(BUILDIR)/lib-doc-ock/docOckPredef.cml-native: $(BUILDIR)/lib-doc-ock/docOckPredef.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPredef.ml > $(BUILDIR)/lib-doc-ock/docOckPredef.cml-native'; \
        else echo 'docOckPredef.cml-native   [32m<=[m [01mpp-native[m unit-docOckPredef-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckPredef-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckPredef.ml > $(BUILDIR)/lib-doc-ock/docOckPredef.cml-native

$(BUILDIR)/lib-doc-ock/docOckPredef.ml.d: $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckPredef-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte > $(BUILDIR)/lib-doc-ock/docOckPredef.ml.d'; \
        else echo 'docOckPredef.ml.d         [32m<=[m [01mdep[m unit-docOckPredef-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckPredef-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte > $(BUILDIR)/lib-doc-ock/docOckPredef.ml.d

$(BUILDIR)/lib-doc-ock/docOckPredef.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckPredef-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte'; \
        else echo 'docOckPredef.cmo          [32m<=[m [01mcompile-byte[m unit-docOckPredef-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckPredef-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckPredef.cml-byte

$(BUILDIR)/lib-doc-ock/docOckPredef.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cmi \
    $(BUILDIR)/lib-doc-ock/docOckPredef.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckPredef-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckPredef.cml-native'; \
        else echo 'docOckPredef.cmx          [32m<=[m [01mcompile-native[m unit-docOckPredef-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckPredef-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckPredef.cml-native

$(BUILDIR)/lib-doc-ock/docOckNameEnv.mli: src/docOckNameEnv.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckNameEnv.mli $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli'; \
        else echo 'docOckNameEnv.mli         [32m<=[m [01mprepare[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckNameEnv.mli $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli

$(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte'; \
        else echo 'docOckNameEnv.cmli-byte   [32m<=[m [01mpp-byte[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-native: $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-native'; \
        else echo 'docOckNameEnv.cmli-native [32m<=[m [01mpp-native[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-native

$(BUILDIR)/lib-doc-ock/docOckNameEnv.mli.d: $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckNameEnv-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli.d'; \
        else echo 'docOckNameEnv.mli.d       [32m<=[m [01mdep[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckNameEnv-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli.d

$(BUILDIR)/lib-doc-ock/docOckNameEnv.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckNameEnv-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte'; \
        else echo 'docOckNameEnv.cmi         [32m<=[m [01mcompile-byte[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckNameEnv-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckNameEnv.ml: src/docOckNameEnv.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckNameEnv.ml $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml'; \
        else echo 'docOckNameEnv.ml          [32m<=[m [01mprepare[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckNameEnv.ml $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml

$(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte: $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte'; \
        else echo 'docOckNameEnv.cml-byte    [32m<=[m [01mpp-byte[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte

$(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-native: $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-native'; \
        else echo 'docOckNameEnv.cml-native  [32m<=[m [01mpp-native[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckNameEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml > $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-native

$(BUILDIR)/lib-doc-ock/docOckNameEnv.ml.d: $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckNameEnv-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte > $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml.d'; \
        else echo 'docOckNameEnv.ml.d        [32m<=[m [01mdep[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckNameEnv-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte > $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml.d

$(BUILDIR)/lib-doc-ock/docOckNameEnv.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckNameEnv-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte'; \
        else echo 'docOckNameEnv.cmo         [32m<=[m [01mcompile-byte[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckNameEnv-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-byte

$(BUILDIR)/lib-doc-ock/docOckNameEnv.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cmi \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckNameEnv-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-native'; \
        else echo 'docOckNameEnv.cmx         [32m<=[m [01mcompile-native[m unit-docOckNameEnv-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckNameEnv-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckNameEnv.cml-native

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli: src/docOckIdentEnv.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckIdentEnv.mli $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli'; \
        else echo 'docOckIdentEnv.mli        [32m<=[m [01mprepare[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckIdentEnv.mli $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte'; \
        else echo 'docOckIdentEnv.cmli-byte  [32m<=[m [01mpp-byte[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-native: $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-native'; \
        else echo 'docOckIdentEnv.cmli-native [32m<=[m [01mpp-native[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-native

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli.d: $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckIdentEnv-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli.d'; \
        else echo 'docOckIdentEnv.mli.d      [32m<=[m [01mdep[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckIdentEnv-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli.d

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckIdentEnv-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte'; \
        else echo 'docOckIdentEnv.cmi        [32m<=[m [01mcompile-byte[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckIdentEnv-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml: src/docOckIdentEnv.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckIdentEnv.ml $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml'; \
        else echo 'docOckIdentEnv.ml         [32m<=[m [01mprepare[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckIdentEnv.ml $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte: $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte'; \
        else echo 'docOckIdentEnv.cml-byte   [32m<=[m [01mpp-byte[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-native: $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-native'; \
        else echo 'docOckIdentEnv.cml-native [32m<=[m [01mpp-native[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckIdentEnv-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-native

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml.d: $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckIdentEnv-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml.d'; \
        else echo 'docOckIdentEnv.ml.d       [32m<=[m [01mdep[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckIdentEnv-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte > $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml.d

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckIdentEnv-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte'; \
        else echo 'docOckIdentEnv.cmo        [32m<=[m [01mcompile-byte[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckIdentEnv-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-byte

$(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cmi \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckIdentEnv-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-native'; \
        else echo 'docOckIdentEnv.cmx        [32m<=[m [01mcompile-native[m unit-docOckIdentEnv-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckIdentEnv-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckIdentEnv.cml-native

$(BUILDIR)/lib-doc-ock/docOckLookup.mli: src/docOckLookup.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckLookup.mli $(BUILDIR)/lib-doc-ock/docOckLookup.mli'; \
        else echo 'docOckLookup.mli          [32m<=[m [01mprepare[m unit-docOckLookup-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckLookup.mli $(BUILDIR)/lib-doc-ock/docOckLookup.mli

$(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckLookup.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckLookup.mli > $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte'; \
        else echo 'docOckLookup.cmli-byte    [32m<=[m [01mpp-byte[m unit-docOckLookup-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckLookup.mli > $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckLookup.cmli-native: $(BUILDIR)/lib-doc-ock/docOckLookup.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckLookup.mli > $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-native'; \
        else echo 'docOckLookup.cmli-native  [32m<=[m [01mpp-native[m unit-docOckLookup-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckLookup.mli > $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-native

$(BUILDIR)/lib-doc-ock/docOckLookup.mli.d: $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckLookup-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckLookup.mli.d'; \
        else echo 'docOckLookup.mli.d        [32m<=[m [01mdep[m unit-docOckLookup-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckLookup-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckLookup.mli.d

$(BUILDIR)/lib-doc-ock/docOckLookup.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckLookup-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte'; \
        else echo 'docOckLookup.cmi          [32m<=[m [01mcompile-byte[m unit-docOckLookup-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckLookup-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckLookup.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckLookup.ml: src/docOckLookup.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckLookup.ml $(BUILDIR)/lib-doc-ock/docOckLookup.ml'; \
        else echo 'docOckLookup.ml           [32m<=[m [01mprepare[m unit-docOckLookup-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckLookup.ml $(BUILDIR)/lib-doc-ock/docOckLookup.ml

$(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte: $(BUILDIR)/lib-doc-ock/docOckLookup.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckLookup.ml > $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte'; \
        else echo 'docOckLookup.cml-byte     [32m<=[m [01mpp-byte[m unit-docOckLookup-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckLookup.ml > $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte

$(BUILDIR)/lib-doc-ock/docOckLookup.cml-native: $(BUILDIR)/lib-doc-ock/docOckLookup.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckLookup.ml > $(BUILDIR)/lib-doc-ock/docOckLookup.cml-native'; \
        else echo 'docOckLookup.cml-native   [32m<=[m [01mpp-native[m unit-docOckLookup-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckLookup-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckLookup.ml > $(BUILDIR)/lib-doc-ock/docOckLookup.cml-native

$(BUILDIR)/lib-doc-ock/docOckLookup.ml.d: $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckLookup-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte > $(BUILDIR)/lib-doc-ock/docOckLookup.ml.d'; \
        else echo 'docOckLookup.ml.d         [32m<=[m [01mdep[m unit-docOckLookup-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckLookup-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte > $(BUILDIR)/lib-doc-ock/docOckLookup.ml.d

$(BUILDIR)/lib-doc-ock/docOckLookup.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckLookup-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte'; \
        else echo 'docOckLookup.cmo          [32m<=[m [01mcompile-byte[m unit-docOckLookup-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckLookup-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckLookup.cml-byte

$(BUILDIR)/lib-doc-ock/docOckLookup.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cmi \
    $(BUILDIR)/lib-doc-ock/docOckLookup.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckLookup-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckLookup.cml-native'; \
        else echo 'docOckLookup.cmx          [32m<=[m [01mcompile-native[m unit-docOckLookup-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckLookup-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckLookup.cml-native

$(BUILDIR)/lib-doc-ock/docOckAttrs.mli: src/docOckAttrs.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckAttrs.mli $(BUILDIR)/lib-doc-ock/docOckAttrs.mli'; \
        else echo 'docOckAttrs.mli           [32m<=[m [01mprepare[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckAttrs.mli $(BUILDIR)/lib-doc-ock/docOckAttrs.mli

$(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckAttrs.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckAttrs.mli > $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte'; \
        else echo 'docOckAttrs.cmli-byte     [32m<=[m [01mpp-byte[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckAttrs.mli > $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-native: $(BUILDIR)/lib-doc-ock/docOckAttrs.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckAttrs.mli > $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-native'; \
        else echo 'docOckAttrs.cmli-native   [32m<=[m [01mpp-native[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckAttrs.mli > $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-native

$(BUILDIR)/lib-doc-ock/docOckAttrs.mli.d: $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckAttrs-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckAttrs.mli.d'; \
        else echo 'docOckAttrs.mli.d         [32m<=[m [01mdep[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckAttrs-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckAttrs.mli.d

$(BUILDIR)/lib-doc-ock/docOckAttrs.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckAttrs-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte'; \
        else echo 'docOckAttrs.cmi           [32m<=[m [01mcompile-byte[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckAttrs-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckAttrs.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckAttrs.ml: src/docOckAttrs.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckAttrs.ml $(BUILDIR)/lib-doc-ock/docOckAttrs.ml'; \
        else echo 'docOckAttrs.ml            [32m<=[m [01mprepare[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckAttrs.ml $(BUILDIR)/lib-doc-ock/docOckAttrs.ml

$(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte: $(BUILDIR)/lib-doc-ock/docOckAttrs.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckAttrs.ml > $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte'; \
        else echo 'docOckAttrs.cml-byte      [32m<=[m [01mpp-byte[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckAttrs.ml > $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte

$(BUILDIR)/lib-doc-ock/docOckAttrs.cml-native: $(BUILDIR)/lib-doc-ock/docOckAttrs.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckAttrs.ml > $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-native'; \
        else echo 'docOckAttrs.cml-native    [32m<=[m [01mpp-native[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckAttrs-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckAttrs.ml > $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-native

$(BUILDIR)/lib-doc-ock/docOckAttrs.ml.d: $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckAttrs-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte > $(BUILDIR)/lib-doc-ock/docOckAttrs.ml.d'; \
        else echo 'docOckAttrs.ml.d          [32m<=[m [01mdep[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckAttrs-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte > $(BUILDIR)/lib-doc-ock/docOckAttrs.ml.d

$(BUILDIR)/lib-doc-ock/docOckAttrs.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckAttrs-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte'; \
        else echo 'docOckAttrs.cmo           [32m<=[m [01mcompile-byte[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckAttrs-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-byte

$(BUILDIR)/lib-doc-ock/docOckAttrs.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cmi \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckAttrs-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-native'; \
        else echo 'docOckAttrs.cmx           [32m<=[m [01mcompile-native[m unit-docOckAttrs-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckAttrs-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckAttrs.cml-native

$(BUILDIR)/lib-doc-ock/docOckCmi.mli: src/docOckCmi.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckCmi.mli $(BUILDIR)/lib-doc-ock/docOckCmi.mli'; \
        else echo 'docOckCmi.mli             [32m<=[m [01mprepare[m unit-docOckCmi-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckCmi.mli $(BUILDIR)/lib-doc-ock/docOckCmi.mli

$(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckCmi.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmi.mli > $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte'; \
        else echo 'docOckCmi.cmli-byte       [32m<=[m [01mpp-byte[m unit-docOckCmi-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmi.mli > $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckCmi.cmli-native: $(BUILDIR)/lib-doc-ock/docOckCmi.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmi.mli > $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-native'; \
        else echo 'docOckCmi.cmli-native     [32m<=[m [01mpp-native[m unit-docOckCmi-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmi.mli > $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-native

$(BUILDIR)/lib-doc-ock/docOckCmi.mli.d: $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckCmi-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckCmi.mli.d'; \
        else echo 'docOckCmi.mli.d           [32m<=[m [01mdep[m unit-docOckCmi-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckCmi-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckCmi.mli.d

$(BUILDIR)/lib-doc-ock/docOckCmi.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckCmi-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte'; \
        else echo 'docOckCmi.cmi             [32m<=[m [01mcompile-byte[m unit-docOckCmi-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckCmi-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckCmi.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckCmi.ml: src/docOckCmi.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckCmi.ml $(BUILDIR)/lib-doc-ock/docOckCmi.ml'; \
        else echo 'docOckCmi.ml              [32m<=[m [01mprepare[m unit-docOckCmi-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckCmi.ml $(BUILDIR)/lib-doc-ock/docOckCmi.ml

$(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte: $(BUILDIR)/lib-doc-ock/docOckCmi.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmi.ml > $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte'; \
        else echo 'docOckCmi.cml-byte        [32m<=[m [01mpp-byte[m unit-docOckCmi-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmi.ml > $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte

$(BUILDIR)/lib-doc-ock/docOckCmi.cml-native: $(BUILDIR)/lib-doc-ock/docOckCmi.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmi.ml > $(BUILDIR)/lib-doc-ock/docOckCmi.cml-native'; \
        else echo 'docOckCmi.cml-native      [32m<=[m [01mpp-native[m unit-docOckCmi-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmi-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmi.ml > $(BUILDIR)/lib-doc-ock/docOckCmi.cml-native

$(BUILDIR)/lib-doc-ock/docOckCmi.ml.d: $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckCmi-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte > $(BUILDIR)/lib-doc-ock/docOckCmi.ml.d'; \
        else echo 'docOckCmi.ml.d            [32m<=[m [01mdep[m unit-docOckCmi-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckCmi-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte > $(BUILDIR)/lib-doc-ock/docOckCmi.ml.d

$(BUILDIR)/lib-doc-ock/docOckCmi.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckCmi-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte'; \
        else echo 'docOckCmi.cmo             [32m<=[m [01mcompile-byte[m unit-docOckCmi-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckCmi-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckCmi.cml-byte

$(BUILDIR)/lib-doc-ock/docOckCmi.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cmi \
    $(BUILDIR)/lib-doc-ock/docOckCmi.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckCmi-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckCmi.cml-native'; \
        else echo 'docOckCmi.cmx             [32m<=[m [01mcompile-native[m unit-docOckCmi-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckCmi-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckCmi.cml-native

$(BUILDIR)/lib-doc-ock/docOckCmti.mli: src/docOckCmti.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckCmti.mli $(BUILDIR)/lib-doc-ock/docOckCmti.mli'; \
        else echo 'docOckCmti.mli            [32m<=[m [01mprepare[m unit-docOckCmti-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckCmti.mli $(BUILDIR)/lib-doc-ock/docOckCmti.mli

$(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckCmti.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmti.mli > $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte'; \
        else echo 'docOckCmti.cmli-byte      [32m<=[m [01mpp-byte[m unit-docOckCmti-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmti.mli > $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckCmti.cmli-native: $(BUILDIR)/lib-doc-ock/docOckCmti.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmti.mli > $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-native'; \
        else echo 'docOckCmti.cmli-native    [32m<=[m [01mpp-native[m unit-docOckCmti-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmti.mli > $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-native

$(BUILDIR)/lib-doc-ock/docOckCmti.mli.d: $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckCmti-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckCmti.mli.d'; \
        else echo 'docOckCmti.mli.d          [32m<=[m [01mdep[m unit-docOckCmti-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckCmti-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckCmti.mli.d

$(BUILDIR)/lib-doc-ock/docOckCmti.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckCmti-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte'; \
        else echo 'docOckCmti.cmi            [32m<=[m [01mcompile-byte[m unit-docOckCmti-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckCmti-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckCmti.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckCmti.ml: src/docOckCmti.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckCmti.ml $(BUILDIR)/lib-doc-ock/docOckCmti.ml'; \
        else echo 'docOckCmti.ml             [32m<=[m [01mprepare[m unit-docOckCmti-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckCmti.ml $(BUILDIR)/lib-doc-ock/docOckCmti.ml

$(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte: $(BUILDIR)/lib-doc-ock/docOckCmti.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmti.ml > $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte'; \
        else echo 'docOckCmti.cml-byte       [32m<=[m [01mpp-byte[m unit-docOckCmti-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmti.ml > $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte

$(BUILDIR)/lib-doc-ock/docOckCmti.cml-native: $(BUILDIR)/lib-doc-ock/docOckCmti.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmti.ml > $(BUILDIR)/lib-doc-ock/docOckCmti.cml-native'; \
        else echo 'docOckCmti.cml-native     [32m<=[m [01mpp-native[m unit-docOckCmti-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmti-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmti.ml > $(BUILDIR)/lib-doc-ock/docOckCmti.cml-native

$(BUILDIR)/lib-doc-ock/docOckCmti.ml.d: $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckCmti-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte > $(BUILDIR)/lib-doc-ock/docOckCmti.ml.d'; \
        else echo 'docOckCmti.ml.d           [32m<=[m [01mdep[m unit-docOckCmti-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckCmti-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte > $(BUILDIR)/lib-doc-ock/docOckCmti.ml.d

$(BUILDIR)/lib-doc-ock/docOckCmti.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckCmti-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte'; \
        else echo 'docOckCmti.cmo            [32m<=[m [01mcompile-byte[m unit-docOckCmti-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckCmti-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckCmti.cml-byte

$(BUILDIR)/lib-doc-ock/docOckCmti.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cmi \
    $(BUILDIR)/lib-doc-ock/docOckCmti.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckCmti-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckCmti.cml-native'; \
        else echo 'docOckCmti.cmx            [32m<=[m [01mcompile-native[m unit-docOckCmti-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckCmti-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckCmti.cml-native

$(BUILDIR)/lib-doc-ock/docOckCmt.mli: src/docOckCmt.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckCmt.mli $(BUILDIR)/lib-doc-ock/docOckCmt.mli'; \
        else echo 'docOckCmt.mli             [32m<=[m [01mprepare[m unit-docOckCmt-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckCmt.mli $(BUILDIR)/lib-doc-ock/docOckCmt.mli

$(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckCmt.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmt.mli > $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte'; \
        else echo 'docOckCmt.cmli-byte       [32m<=[m [01mpp-byte[m unit-docOckCmt-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmt.mli > $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckCmt.cmli-native: $(BUILDIR)/lib-doc-ock/docOckCmt.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmt.mli > $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-native'; \
        else echo 'docOckCmt.cmli-native     [32m<=[m [01mpp-native[m unit-docOckCmt-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmt.mli > $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-native

$(BUILDIR)/lib-doc-ock/docOckCmt.mli.d: $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckCmt-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckCmt.mli.d'; \
        else echo 'docOckCmt.mli.d           [32m<=[m [01mdep[m unit-docOckCmt-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckCmt-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckCmt.mli.d

$(BUILDIR)/lib-doc-ock/docOckCmt.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckCmt-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte'; \
        else echo 'docOckCmt.cmi             [32m<=[m [01mcompile-byte[m unit-docOckCmt-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckCmt-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckCmt.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckCmt.ml: src/docOckCmt.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckCmt.ml $(BUILDIR)/lib-doc-ock/docOckCmt.ml'; \
        else echo 'docOckCmt.ml              [32m<=[m [01mprepare[m unit-docOckCmt-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckCmt.ml $(BUILDIR)/lib-doc-ock/docOckCmt.ml

$(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte: $(BUILDIR)/lib-doc-ock/docOckCmt.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmt.ml > $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte'; \
        else echo 'docOckCmt.cml-byte        [32m<=[m [01mpp-byte[m unit-docOckCmt-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckCmt.ml > $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte

$(BUILDIR)/lib-doc-ock/docOckCmt.cml-native: $(BUILDIR)/lib-doc-ock/docOckCmt.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmt.ml > $(BUILDIR)/lib-doc-ock/docOckCmt.cml-native'; \
        else echo 'docOckCmt.cml-native      [32m<=[m [01mpp-native[m unit-docOckCmt-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckCmt-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckCmt.ml > $(BUILDIR)/lib-doc-ock/docOckCmt.cml-native

$(BUILDIR)/lib-doc-ock/docOckCmt.ml.d: $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckCmt-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte > $(BUILDIR)/lib-doc-ock/docOckCmt.ml.d'; \
        else echo 'docOckCmt.ml.d            [32m<=[m [01mdep[m unit-docOckCmt-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckCmt-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte > $(BUILDIR)/lib-doc-ock/docOckCmt.ml.d

$(BUILDIR)/lib-doc-ock/docOckCmt.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckCmt-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte'; \
        else echo 'docOckCmt.cmo             [32m<=[m [01mcompile-byte[m unit-docOckCmt-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckCmt-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckCmt.cml-byte

$(BUILDIR)/lib-doc-ock/docOckCmt.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cmi \
    $(BUILDIR)/lib-doc-ock/docOckCmt.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckCmt-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckCmt.cml-native'; \
        else echo 'docOckCmt.cmx             [32m<=[m [01mcompile-native[m unit-docOckCmt-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckCmt-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckCmt.cml-native

$(BUILDIR)/lib-doc-ock/docOckComponents.mli: src/docOckComponents.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckComponents.mli $(BUILDIR)/lib-doc-ock/docOckComponents.mli'; \
        else echo 'docOckComponents.mli      [32m<=[m [01mprepare[m unit-docOckComponents-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckComponents.mli $(BUILDIR)/lib-doc-ock/docOckComponents.mli

$(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckComponents.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponents.mli > $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte'; \
        else echo 'docOckComponents.cmli-byte [32m<=[m [01mpp-byte[m unit-docOckComponents-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponents.mli > $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckComponents.cmli-native: $(BUILDIR)/lib-doc-ock/docOckComponents.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponents.mli > $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-native'; \
        else echo 'docOckComponents.cmli-native [32m<=[m [01mpp-native[m unit-docOckComponents-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponents.mli > $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-native

$(BUILDIR)/lib-doc-ock/docOckComponents.mli.d: $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckComponents-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckComponents.mli.d'; \
        else echo 'docOckComponents.mli.d    [32m<=[m [01mdep[m unit-docOckComponents-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckComponents-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckComponents.mli.d

$(BUILDIR)/lib-doc-ock/docOckComponents.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckComponents-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte'; \
        else echo 'docOckComponents.cmi      [32m<=[m [01mcompile-byte[m unit-docOckComponents-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckComponents-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckComponents.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckComponents.ml: src/docOckComponents.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckComponents.ml $(BUILDIR)/lib-doc-ock/docOckComponents.ml'; \
        else echo 'docOckComponents.ml       [32m<=[m [01mprepare[m unit-docOckComponents-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckComponents.ml $(BUILDIR)/lib-doc-ock/docOckComponents.ml

$(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte: $(BUILDIR)/lib-doc-ock/docOckComponents.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponents.ml > $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte'; \
        else echo 'docOckComponents.cml-byte [32m<=[m [01mpp-byte[m unit-docOckComponents-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponents.ml > $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte

$(BUILDIR)/lib-doc-ock/docOckComponents.cml-native: $(BUILDIR)/lib-doc-ock/docOckComponents.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponents.ml > $(BUILDIR)/lib-doc-ock/docOckComponents.cml-native'; \
        else echo 'docOckComponents.cml-native [32m<=[m [01mpp-native[m unit-docOckComponents-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponents-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponents.ml > $(BUILDIR)/lib-doc-ock/docOckComponents.cml-native

$(BUILDIR)/lib-doc-ock/docOckComponents.ml.d: $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckComponents-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte > $(BUILDIR)/lib-doc-ock/docOckComponents.ml.d'; \
        else echo 'docOckComponents.ml.d     [32m<=[m [01mdep[m unit-docOckComponents-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckComponents-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte > $(BUILDIR)/lib-doc-ock/docOckComponents.ml.d

$(BUILDIR)/lib-doc-ock/docOckComponents.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckComponents-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte'; \
        else echo 'docOckComponents.cmo      [32m<=[m [01mcompile-byte[m unit-docOckComponents-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckComponents-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckComponents.cml-byte

$(BUILDIR)/lib-doc-ock/docOckComponents.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cmi \
    $(BUILDIR)/lib-doc-ock/docOckComponents.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckComponents-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckComponents.cml-native'; \
        else echo 'docOckComponents.cmx      [32m<=[m [01mcompile-native[m unit-docOckComponents-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckComponents-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckComponents.cml-native

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli: src/docOckComponentTbl.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckComponentTbl.mli $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli'; \
        else echo 'docOckComponentTbl.mli    [32m<=[m [01mprepare[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckComponentTbl.mli $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte'; \
        else echo 'docOckComponentTbl.cmli-byte [32m<=[m [01mpp-byte[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-native: $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-native'; \
        else echo 'docOckComponentTbl.cmli-native [32m<=[m [01mpp-native[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-native

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli.d: $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckComponentTbl-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli.d'; \
        else echo 'docOckComponentTbl.mli.d  [32m<=[m [01mdep[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckComponentTbl-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli.d

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckComponentTbl-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte'; \
        else echo 'docOckComponentTbl.cmi    [32m<=[m [01mcompile-byte[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckComponentTbl-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml: src/docOckComponentTbl.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckComponentTbl.ml $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml'; \
        else echo 'docOckComponentTbl.ml     [32m<=[m [01mprepare[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckComponentTbl.ml $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte: $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte'; \
        else echo 'docOckComponentTbl.cml-byte [32m<=[m [01mpp-byte[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-native: $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-native'; \
        else echo 'docOckComponentTbl.cml-native [32m<=[m [01mpp-native[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckComponentTbl-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-native

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml.d: $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckComponentTbl-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml.d'; \
        else echo 'docOckComponentTbl.ml.d   [32m<=[m [01mdep[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckComponentTbl-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte > $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml.d

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckComponentTbl-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte'; \
        else echo 'docOckComponentTbl.cmo    [32m<=[m [01mcompile-byte[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckComponentTbl-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-byte

$(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cmi \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckComponentTbl-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-native'; \
        else echo 'docOckComponentTbl.cmx    [32m<=[m [01mcompile-native[m unit-docOckComponentTbl-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckComponentTbl-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckComponentTbl.cml-native

$(BUILDIR)/lib-doc-ock/docOckResolve.mli: src/docOckResolve.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckResolve.mli $(BUILDIR)/lib-doc-ock/docOckResolve.mli'; \
        else echo 'docOckResolve.mli         [32m<=[m [01mprepare[m unit-docOckResolve-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckResolve.mli $(BUILDIR)/lib-doc-ock/docOckResolve.mli

$(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckResolve.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckResolve.mli > $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte'; \
        else echo 'docOckResolve.cmli-byte   [32m<=[m [01mpp-byte[m unit-docOckResolve-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckResolve.mli > $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckResolve.cmli-native: $(BUILDIR)/lib-doc-ock/docOckResolve.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckResolve.mli > $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-native'; \
        else echo 'docOckResolve.cmli-native [32m<=[m [01mpp-native[m unit-docOckResolve-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckResolve.mli > $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-native

$(BUILDIR)/lib-doc-ock/docOckResolve.mli.d: $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckResolve-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckResolve.mli.d'; \
        else echo 'docOckResolve.mli.d       [32m<=[m [01mdep[m unit-docOckResolve-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckResolve-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckResolve.mli.d

$(BUILDIR)/lib-doc-ock/docOckResolve.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckResolve-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte'; \
        else echo 'docOckResolve.cmi         [32m<=[m [01mcompile-byte[m unit-docOckResolve-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckResolve-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckResolve.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckResolve.ml: src/docOckResolve.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckResolve.ml $(BUILDIR)/lib-doc-ock/docOckResolve.ml'; \
        else echo 'docOckResolve.ml          [32m<=[m [01mprepare[m unit-docOckResolve-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckResolve.ml $(BUILDIR)/lib-doc-ock/docOckResolve.ml

$(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte: $(BUILDIR)/lib-doc-ock/docOckResolve.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckResolve.ml > $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte'; \
        else echo 'docOckResolve.cml-byte    [32m<=[m [01mpp-byte[m unit-docOckResolve-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckResolve.ml > $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte

$(BUILDIR)/lib-doc-ock/docOckResolve.cml-native: $(BUILDIR)/lib-doc-ock/docOckResolve.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckResolve.ml > $(BUILDIR)/lib-doc-ock/docOckResolve.cml-native'; \
        else echo 'docOckResolve.cml-native  [32m<=[m [01mpp-native[m unit-docOckResolve-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckResolve-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckResolve.ml > $(BUILDIR)/lib-doc-ock/docOckResolve.cml-native

$(BUILDIR)/lib-doc-ock/docOckResolve.ml.d: $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckResolve-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte > $(BUILDIR)/lib-doc-ock/docOckResolve.ml.d'; \
        else echo 'docOckResolve.ml.d        [32m<=[m [01mdep[m unit-docOckResolve-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckResolve-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte > $(BUILDIR)/lib-doc-ock/docOckResolve.ml.d

$(BUILDIR)/lib-doc-ock/docOckResolve.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckResolve-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte'; \
        else echo 'docOckResolve.cmo         [32m<=[m [01mcompile-byte[m unit-docOckResolve-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckResolve-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckResolve.cml-byte

$(BUILDIR)/lib-doc-ock/docOckResolve.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cmi \
    $(BUILDIR)/lib-doc-ock/docOckResolve.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckResolve-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckResolve.cml-native'; \
        else echo 'docOckResolve.cmx         [32m<=[m [01mcompile-native[m unit-docOckResolve-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckResolve-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckResolve.cml-native

$(BUILDIR)/lib-doc-ock/docOckSubst.mli: src/docOckSubst.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckSubst.mli $(BUILDIR)/lib-doc-ock/docOckSubst.mli'; \
        else echo 'docOckSubst.mli           [32m<=[m [01mprepare[m unit-docOckSubst-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckSubst.mli $(BUILDIR)/lib-doc-ock/docOckSubst.mli

$(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte: $(BUILDIR)/lib-doc-ock/docOckSubst.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckSubst.mli > $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte'; \
        else echo 'docOckSubst.cmli-byte     [32m<=[m [01mpp-byte[m unit-docOckSubst-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckSubst.mli > $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckSubst.cmli-native: $(BUILDIR)/lib-doc-ock/docOckSubst.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckSubst.mli > $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-native'; \
        else echo 'docOckSubst.cmli-native   [32m<=[m [01mpp-native[m unit-docOckSubst-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckSubst.mli > $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-native

$(BUILDIR)/lib-doc-ock/docOckSubst.mli.d: $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckSubst-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckSubst.mli.d'; \
        else echo 'docOckSubst.mli.d         [32m<=[m [01mdep[m unit-docOckSubst-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckSubst-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte > $(BUILDIR)/lib-doc-ock/docOckSubst.mli.d

$(BUILDIR)/lib-doc-ock/docOckSubst.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckSubst-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte'; \
        else echo 'docOckSubst.cmi           [32m<=[m [01mcompile-byte[m unit-docOckSubst-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckSubst-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOckSubst.cmli-byte

$(BUILDIR)/lib-doc-ock/docOckSubst.ml: src/docOckSubst.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOckSubst.ml $(BUILDIR)/lib-doc-ock/docOckSubst.ml'; \
        else echo 'docOckSubst.ml            [32m<=[m [01mprepare[m unit-docOckSubst-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOckSubst.ml $(BUILDIR)/lib-doc-ock/docOckSubst.ml

$(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte: $(BUILDIR)/lib-doc-ock/docOckSubst.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckSubst.ml > $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte'; \
        else echo 'docOckSubst.cml-byte      [32m<=[m [01mpp-byte[m unit-docOckSubst-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOckSubst.ml > $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte

$(BUILDIR)/lib-doc-ock/docOckSubst.cml-native: $(BUILDIR)/lib-doc-ock/docOckSubst.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckSubst.ml > $(BUILDIR)/lib-doc-ock/docOckSubst.cml-native'; \
        else echo 'docOckSubst.cml-native    [32m<=[m [01mpp-native[m unit-docOckSubst-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOckSubst-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOckSubst.ml > $(BUILDIR)/lib-doc-ock/docOckSubst.cml-native

$(BUILDIR)/lib-doc-ock/docOckSubst.ml.d: $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOckSubst-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte > $(BUILDIR)/lib-doc-ock/docOckSubst.ml.d'; \
        else echo 'docOckSubst.ml.d          [32m<=[m [01mdep[m unit-docOckSubst-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOckSubst-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte > $(BUILDIR)/lib-doc-ock/docOckSubst.ml.d

$(BUILDIR)/lib-doc-ock/docOckSubst.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOckSubst-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte'; \
        else echo 'docOckSubst.cmo           [32m<=[m [01mcompile-byte[m unit-docOckSubst-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOckSubst-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOckSubst.cml-byte

$(BUILDIR)/lib-doc-ock/docOckSubst.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cmi \
    $(BUILDIR)/lib-doc-ock/docOckSubst.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOckSubst-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckSubst.cml-native'; \
        else echo 'docOckSubst.cmx           [32m<=[m [01mcompile-native[m unit-docOckSubst-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOckSubst-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOckSubst.cml-native

$(BUILDIR)/lib-doc-ock/docOck.mli: src/docOck.mli \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOck.mli $(BUILDIR)/lib-doc-ock/docOck.mli'; \
        else echo 'docOck.mli                [32m<=[m [01mprepare[m unit-docOck-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOck.mli $(BUILDIR)/lib-doc-ock/docOck.mli

$(BUILDIR)/lib-doc-ock/docOck.cmli-byte: $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOck.mli > $(BUILDIR)/lib-doc-ock/docOck.cmli-byte'; \
        else echo 'docOck.cmli-byte          [32m<=[m [01mpp-byte[m unit-docOck-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOck.mli > $(BUILDIR)/lib-doc-ock/docOck.cmli-byte

$(BUILDIR)/lib-doc-ock/docOck.cmli-native: $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOck.mli > $(BUILDIR)/lib-doc-ock/docOck.cmli-native'; \
        else echo 'docOck.cmli-native        [32m<=[m [01mpp-native[m unit-docOck-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOck.mli > $(BUILDIR)/lib-doc-ock/docOck.cmli-native

$(BUILDIR)/lib-doc-ock/docOck.mli.d: $(BUILDIR)/lib-doc-ock/docOck.cmli-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOck-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOck.cmli-byte > $(BUILDIR)/lib-doc-ock/docOck.mli.d'; \
        else echo 'docOck.mli.d              [32m<=[m [01mdep[m unit-docOck-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOck-lib-doc-ock.dep) -intf $(BUILDIR)/lib-doc-ock/docOck.cmli-byte > $(BUILDIR)/lib-doc-ock/docOck.mli.d

$(BUILDIR)/lib-doc-ock/docOck.cmi:  \
    $(BUILDIR)/lib-doc-ock/docOck.cmli-byte \
    $(BUILDIR)/lib-doc-ock/docOck.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOck-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOck.cmli-byte'; \
        else echo 'docOck.cmi                [32m<=[m [01mcompile-byte[m unit-docOck-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOck-lib-doc-ock.compile-byte) -intf $(BUILDIR)/lib-doc-ock/docOck.cmli-byte

$(BUILDIR)/lib-doc-ock/docOck.ml: src/docOck.ml \
    | $(BUILDIR)/lib-doc-ock/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/docOck.ml $(BUILDIR)/lib-doc-ock/docOck.ml'; \
        else echo 'docOck.ml                 [32m<=[m [01mprepare[m unit-docOck-lib-doc-ock'; fi
	@$(LN) $(ROOTDIR)/src/docOck.ml $(BUILDIR)/lib-doc-ock/docOck.ml

$(BUILDIR)/lib-doc-ock/docOck.cml-byte: $(BUILDIR)/lib-doc-ock/docOck.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOck.ml > $(BUILDIR)/lib-doc-ock/docOck.cml-byte'; \
        else echo 'docOck.cml-byte           [32m<=[m [01mpp-byte[m unit-docOck-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-byte) $(BUILDIR)/lib-doc-ock/docOck.ml > $(BUILDIR)/lib-doc-ock/docOck.cml-byte

$(BUILDIR)/lib-doc-ock/docOck.cml-native: $(BUILDIR)/lib-doc-ock/docOck.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOck.ml > $(BUILDIR)/lib-doc-ock/docOck.cml-native'; \
        else echo 'docOck.cml-native         [32m<=[m [01mpp-native[m unit-docOck-lib-doc-ock'; fi
	@$(DUMPAST) camlp4o $(unit-docOck-lib-doc-ock.pp-native) $(BUILDIR)/lib-doc-ock/docOck.ml > $(BUILDIR)/lib-doc-ock/docOck.cml-native

$(BUILDIR)/lib-doc-ock/docOck.ml.d: $(BUILDIR)/lib-doc-ock/docOck.cml-byte \
    |  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml \
    $(BUILDIR)/lib-doc-ock/docOck.ml \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli \
    $(BUILDIR)/lib-doc-ock/docOck.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-docOck-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOck.cml-byte > $(BUILDIR)/lib-doc-ock/docOck.ml.d'; \
        else echo 'docOck.ml.d               [32m<=[m [01mdep[m unit-docOck-lib-doc-ock'; fi
	@$(OCAMLDEP) $(unit-docOck-lib-doc-ock.dep) -impl $(BUILDIR)/lib-doc-ock/docOck.cml-byte > $(BUILDIR)/lib-doc-ock/docOck.ml.d

$(BUILDIR)/lib-doc-ock/docOck.cmo:  \
    $(BUILDIR)/lib-doc-ock/docOck.ml.d \
    $(BUILDIR)/lib-doc-ock/docOck.cml-byte \
    $(BUILDIR)/lib-doc-ock/docOck.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-docOck-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOck.cml-byte'; \
        else echo 'docOck.cmo                [32m<=[m [01mcompile-byte[m unit-docOck-lib-doc-ock'; fi
	@$(OCAMLC) -c $(unit-docOck-lib-doc-ock.compile-byte) -impl $(BUILDIR)/lib-doc-ock/docOck.cml-byte

$(BUILDIR)/lib-doc-ock/docOck.cmx:  \
    $(BUILDIR)/lib-doc-ock/docOck.ml.d \
    $(BUILDIR)/lib-doc-ock/docOck.cmi \
    $(BUILDIR)/lib-doc-ock/docOck.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-docOck-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOck.cml-native'; \
        else echo 'docOck.cmx                [32m<=[m [01mcompile-native[m unit-docOck-lib-doc-ock'; fi
	@$(OCAMLOPT) -c $(unit-docOck-lib-doc-ock.compile-native) -impl $(BUILDIR)/lib-doc-ock/docOck.cml-native

-include Makefile.assemble
ifneq ($(filter-out clean help distclean,$(MAKECMDGOALS)),)
-include  \
    $(BUILDIR)/lib-doc-ock/docOckPaths.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckPaths.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckTypes.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckMaps.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckMaps.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckPredef.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckPredef.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckNameEnv.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckIdentEnv.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckLookup.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckLookup.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckAttrs.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckCmi.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmi.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckCmti.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmti.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckCmt.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckCmt.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckComponents.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckComponents.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckComponentTbl.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckResolve.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckResolve.mli.d \
    $(BUILDIR)/lib-doc-ock/docOckSubst.ml.d \
    $(BUILDIR)/lib-doc-ock/docOckSubst.mli.d \
    $(BUILDIR)/lib-doc-ock/docOck.ml.d \
    $(BUILDIR)/lib-doc-ock/docOck.mli.d
endif
include 
